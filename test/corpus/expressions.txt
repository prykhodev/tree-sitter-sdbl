================================================================================
Single Field Predicate
================================================================================

SELECT *
FROM my_table m
WHERE m.is_not_deleted;

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (all_fields))))
    (from
      (keyword_from)
      (relation
        (object_reference
          name: (identifier))
        alias: (identifier))
      (where
        (keyword_where)
        predicate: (field
          (object_reference
            name: (identifier))
          name: (identifier))))))

================================================================================
Multiple Field Predicates
================================================================================

SELECT *
FROM my_table m
WHERE m.is_not_deleted AND m.is_visible;

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (all_fields))))
    (from
      (keyword_from)
      (relation
        (object_reference
          name: (identifier))
        alias: (identifier))
      (where
        (keyword_where)
        predicate: (binary_expression
          left: (field
            (object_reference
              name: (identifier))
            name: (identifier))
          operator: (keyword_and)
          right: (field
            (object_reference
              name: (identifier))
            name: (identifier)))))))

================================================================================
Single Unary Predicate
================================================================================

SELECT *
FROM my_table m
WHERE NOT m.is_not_deleted;

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (all_fields))))
    (from
      (keyword_from)
      (relation
        (object_reference
          name: (identifier))
        alias: (identifier))
      (where
        (keyword_where)
        predicate: (unary_expression
          operator: (keyword_not)
          operand: (field
            (object_reference
              name: (identifier))
            name: (identifier)))))))

================================================================================
Multiple Unary Predicates
================================================================================

SELECT *
FROM my_table m
WHERE NOT m.is_not_deleted
  AND NOT m.is_visible;

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (all_fields))))
    (from
      (keyword_from)
      (relation
        (object_reference
          name: (identifier))
        alias: (identifier))
      (where
        (keyword_where)
        predicate: (binary_expression
          left: (unary_expression
            operator: (keyword_not)
            operand: (field
              (object_reference
                name: (identifier))
              name: (identifier)))
          operator: (keyword_and)
          right: (unary_expression
            operator: (keyword_not)
            operand: (field
              (object_reference
                name: (identifier))
              name: (identifier))))))))

================================================================================
Mixed Predicate types
================================================================================

SELECT *
FROM my_table m
WHERE m.status = "success"
  AND m.name = "foobar"
  AND m.id = 5
  AND m.is_not_deleted

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (all_fields))))
    (from
      (keyword_from)
      (relation
        (object_reference
          name: (identifier))
        alias: (identifier))
      (where
        (keyword_where)
        predicate: (binary_expression
          left: (binary_expression
            left: (binary_expression
              left: (binary_expression
                left: (field
                  (object_reference
                    name: (identifier))
                  name: (identifier))
                right: (literal))
              operator: (keyword_and)
              right: (binary_expression
                left: (field
                  (object_reference
                    name: (identifier))
                  name: (identifier))
                right: (literal)))
            operator: (keyword_and)
            right: (binary_expression
              left: (field
                (object_reference
                  name: (identifier))
                name: (identifier))
              right: (literal)))
          operator: (keyword_and)
          right: (field
            (object_reference
              name: (identifier))
            name: (identifier)))))))

================================================================================
Disjunctive Predicate
================================================================================

SELECT *
FROM my_table m
WHERE m.status = "success"
  AND m.name = "foobar"
  OR m.id = 5
  AND m.is_not_deleted

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (all_fields))))
    (from
      (keyword_from)
      (relation
        (object_reference
          name: (identifier))
        alias: (identifier))
      (where
        (keyword_where)
        predicate: (binary_expression
          left: (binary_expression
            left: (binary_expression
              left: (field
                (object_reference
                  name: (identifier))
                name: (identifier))
              right: (literal))
            operator: (keyword_and)
            right: (binary_expression
              left: (field
                (object_reference
                  name: (identifier))
                name: (identifier))
              right: (literal)))
          operator: (keyword_or)
          right: (binary_expression
            left: (binary_expression
              left: (field
                (object_reference
                  name: (identifier))
                name: (identifier))
              right: (literal))
            operator: (keyword_and)
            right: (field
              (object_reference
                name: (identifier))
              name: (identifier))))))))

================================================================================
Field Predicate w/ unary predicate
================================================================================

SELECT *
FROM my_table m
WHERE NOT m.is_deleted;

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (all_fields))))
    (from
      (keyword_from)
      (relation
        (object_reference
          name: (identifier))
        alias: (identifier))
      (where
        (keyword_where)
        predicate: (unary_expression
          operator: (keyword_not)
          operand: (field
            (object_reference
              name: (identifier))
            name: (identifier)))))))

================================================================================
Field Predicate w/ multiple unary predicate
================================================================================

SELECT *
FROM my_table m
WHERE NOT m.is_deleted
  AND NOT m.is_invisible;

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (all_fields))))
    (from
      (keyword_from)
      (relation
        (object_reference
          name: (identifier))
        alias: (identifier))
      (where
        (keyword_where)
        predicate: (binary_expression
          left: (unary_expression
            operator: (keyword_not)
            operand: (field
              (object_reference
                name: (identifier))
              name: (identifier)))
          operator: (keyword_and)
          right: (unary_expression
            operator: (keyword_not)
            operand: (field
              (object_reference
                name: (identifier))
              name: (identifier))))))))

================================================================================
Predicates with keywords
================================================================================

SELECT *
FROM my_table
WHERE id IS NOT NULL
  AND name IS NULL;

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (all_fields))))
    (from
      (keyword_from)
      (relation
        (object_reference
          name: (identifier)))
      (where
        (keyword_where)
        predicate: (binary_expression
          left: (binary_expression
            left: (field
              name: (identifier))
            operator: (is_not
              (keyword_is)
              (keyword_not))
            right: (literal
              (keyword_null)))
          operator: (keyword_and)
          right: (binary_expression
            left: (field
              name: (identifier))
            operator: (keyword_is)
            right: (literal
              (keyword_null))))))))

================================================================================
Complex Predicates
================================================================================

SELECT id
FROM my_table m
WHERE m.id > 4 AND id < 3;

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (field
            name: (identifier)))))
    (from
      (keyword_from)
      (relation
        (object_reference
          name: (identifier))
        alias: (identifier))
      (where
        (keyword_where)
        predicate: (binary_expression
          left: (binary_expression
            left: (field
              (object_reference
                name: (identifier))
              name: (identifier))
            right: (literal))
          operator: (keyword_and)
          right: (binary_expression
            left: (field
              name: (identifier))
            right: (literal)))))))

================================================================================
Where with pattern matching
================================================================================

SELECT
    *
FROM
    a
WHERE
        a LIKE "%a"
    AND a NOT LIKE "%a";


--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (all_fields))))
    (from
      (keyword_from)
      (relation
        (object_reference
          name: (identifier)))
      (where
        (keyword_where)
        predicate: (binary_expression
          left: (binary_expression
            left: (field
              name: (identifier))
            operator: (keyword_like)
            right: (literal))
          operator: (keyword_and)
          right: (binary_expression
            left: (field
              name: (identifier))
            operator: (not_like
              (keyword_not)
              (keyword_like))
            right: (literal)))))))

================================================================================
NOT EQUAL <> OPERATOR
================================================================================

SELECT
    *
FROM
    a
WHERE
    a <> "%a"

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (all_fields))))
    (from
      (keyword_from)
      (relation
        (object_reference
          name: (identifier)))
      (where
        (keyword_where)
        predicate: (binary_expression
          left: (field
            name: (identifier))
          right: (literal))))))

================================================================================
Simple CASE
================================================================================

SELECT
    CASE
        WHEN TRUE THEN 1
    END;

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (case
            (keyword_case)
            (keyword_when)
            (literal
              (keyword_true))
            (keyword_then)
            (literal)
            (keyword_end)))))))

================================================================================
CASE with else
================================================================================

SELECT
    CASE
        WHEN TRUE THEN 1
        ELSE 2
    END;

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (case
            (keyword_case)
            (keyword_when)
            (literal
              (keyword_true))
            (keyword_then)
            (literal)
            (keyword_else)
            (literal)
            (keyword_end)))))))

================================================================================
CASE with more then one when
================================================================================

SELECT
    CASE
        WHEN TRUE THEN 1
        WHEN TRUE THEN 2
    END;

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (case
            (keyword_case)
            (keyword_when)
            (literal
              (keyword_true))
            (keyword_then)
            (literal)
            (keyword_when)
            (literal
              (keyword_true))
            (keyword_then)
            (literal)
            (keyword_end)))))))

================================================================================
CASE with more then one when and else
================================================================================

SELECT
    CASE
        WHEN TRUE THEN 1
        WHEN TRUE THEN 2
        ELSE 3
    END;

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (case
            (keyword_case)
            (keyword_when)
            (literal
              (keyword_true))
            (keyword_then)
            (literal)
            (keyword_when)
            (literal
              (keyword_true))
            (keyword_then)
            (literal)
            (keyword_else)
            (literal)
            (keyword_end)))))))

================================================================================
CASE x
================================================================================

SELECT
    case table.x
        when 1 then "one"
        when "2" then "two"
        when NULL then "three"
        else "zero"
    end
from table;

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (case
            (keyword_case)
            (field
              (object_reference
                name: (identifier))
              name: (identifier))
            (keyword_when)
            (literal)
            (keyword_then)
            (literal)
            (keyword_when)
            (literal)
            (keyword_then)
            (literal)
            (keyword_when)
            (literal
              (keyword_null))
            (keyword_then)
            (literal)
            (keyword_else)
            (literal)
            (keyword_end)))))
    (from
      (keyword_from)
      (relation
        (object_reference
          name: (identifier))))))

================================================================================
In with subquery
================================================================================

SELECT *
FROM foo
WHERE id IN (
  SELECT 1
  FROM bar
)

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (all_fields))))
    (from
      (keyword_from)
      (relation
        (object_reference
          name: (identifier)))
      (where
        (keyword_where)
        predicate: (binary_expression
          left: (field
            name: (identifier))
          operator: (keyword_in)
          right: (subquery
            (select
              (keyword_select)
              (select_expression
                (term
                  value: (literal))))
            (from
              (keyword_from)
              (relation
                (object_reference
                  name: (identifier))))))))))

================================================================================
Simple select with IN
================================================================================

SELECT id
FROM my_table
WHERE id IN(1,2);

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (field
            name: (identifier)))))
    (from
      (keyword_from)
      (relation
        (object_reference
          name: (identifier)))
      (where
        (keyword_where)
        predicate: (binary_expression
          left: (field
            name: (identifier))
          operator: (keyword_in)
          right: (list
            (literal)
            (literal)))))))

================================================================================
Simple select with NOT IN
================================================================================

SELECT id
FROM my_table
WHERE id NOT IN(1,2);

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (field
            name: (identifier)))))
    (from
      (keyword_from)
      (relation
        (object_reference
          name: (identifier)))
      (where
        (keyword_where)
        predicate: (binary_expression
          left: (field
            name: (identifier))
          operator: (not_in
            (keyword_not)
            (keyword_in))
          right: (list
            (literal)
            (literal)))))))

================================================================================
Simple select with more NOT INs
================================================================================

SELECT id
FROM my_table
WHERE id NOT IN(1,2) AND id NOT IN (SELECT id FROM other_table);

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (field
            name: (identifier)))))
    (from
      (keyword_from)
      (relation
        (object_reference
          name: (identifier)))
      (where
        (keyword_where)
        predicate: (binary_expression
          left: (binary_expression
            left: (field
              name: (identifier))
            operator: (not_in
              (keyword_not)
              (keyword_in))
            right: (list
              (literal)
              (literal)))
          operator: (keyword_and)
          right: (binary_expression
            left: (field
              name: (identifier))
            operator: (not_in
              (keyword_not)
              (keyword_in))
            right: (subquery
              (select
                (keyword_select)
                (select_expression
                  (term
                    value: (field
                      name: (identifier)))))
              (from
                (keyword_from)
                (relation
                  (object_reference
                    name: (identifier)))))))))))

================================================================================
Distinct
================================================================================

SELECT DISTINCT(id)
FROM my_table;
--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (keyword_distinct)
        (term
          value: (parenthesized_expression
            (field
              name: (identifier))))))
    (from
      (keyword_from)
      (relation
        (object_reference
          name: (identifier))))))

================================================================================
Distinct, no extra parens
================================================================================

SELECT DISTINCT id
FROM my_table;
--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (keyword_distinct)
        (term
          value: (field
            name: (identifier)))))
    (from
      (keyword_from)
      (relation
        (object_reference
          name: (identifier))))))

================================================================================
Distinct in count function
================================================================================

SELECT COUNT(DISTINCT(id))
FROM my_table;
--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (count
            (keyword_count)
            (keyword_distinct)
            parameter: (term
              value: (parenthesized_expression
                (field
                  name: (identifier))))))))
    (from
      (keyword_from)
      (relation
        (object_reference
          name: (identifier))))))

================================================================================
COUNT *
================================================================================

SELECT COUNT(*)
FROM my_table;
--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (count
            (keyword_count)
            parameter: (term
              value: (all_fields))))))
    (from
      (keyword_from)
      (relation
        (object_reference
          name: (identifier))))))

================================================================================
Distinct in count function, no extra parens
================================================================================

SELECT COUNT(DISTINCT id)
FROM my_table;
--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (count
            (keyword_count)
            (keyword_distinct)
            parameter: (term
              value: (field
                name: (identifier)))))))
    (from
      (keyword_from)
      (relation
        (object_reference
          name: (identifier))))))

================================================================================
Positive and negative integers
================================================================================

SELECT b.a + 3 from b where b.a >= -14

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (binary_expression
            left: (field
              (object_reference
                name: (identifier))
              name: (identifier))
            right: (literal)))))
    (from
      (keyword_from)
      (relation
        (object_reference
          name: (identifier)))
      (where
        (keyword_where)
        predicate: (binary_expression
          left: (field
            (object_reference
              name: (identifier))
            name: (identifier))
          right: (literal))))))

================================================================================
Positive and negative floats
================================================================================

SELECT b.a + 3.1415 from b where b.a >= -3.14

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (binary_expression
            left: (field
              (object_reference
                name: (identifier))
              name: (identifier))
            right: (literal)))))
    (from
      (keyword_from)
      (relation
        (object_reference
          name: (identifier)))
      (where
        (keyword_where)
        predicate: (binary_expression
          left: (field
            (object_reference
              name: (identifier))
            name: (identifier))
          right: (literal))))))

================================================================================
Select between values
================================================================================

SELECT
    NULL
FROM b
WHERE b.a BETWEEN 0 AND 10;

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (literal
            (keyword_null)))))
    (from
      (keyword_from)
      (relation
        (object_reference
          name: (identifier)))
      (where
        (keyword_where)
        predicate: (between_expression
          left: (field
            (object_reference
              name: (identifier))
            name: (identifier))
          operator: (keyword_between)
          low: (literal)
          (keyword_and)
          high: (literal))))))

================================================================================
Select not between range
================================================================================

SELECT
    NULL
FROM b
WHERE b.a NOT BETWEEN 1 AND 3;

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (literal
            (keyword_null)))))
    (from
      (keyword_from)
      (relation
        (object_reference
          name: (identifier)))
      (where
        (keyword_where)
        predicate: (between_expression
          left: (field
            (object_reference
              name: (identifier))
            name: (identifier))
          operator: (keyword_not)
          operator: (keyword_between)
          low: (literal)
          (keyword_and)
          high: (literal))))))

================================================================================
parameterized expressions
================================================================================

SELECT 1
FROM t
WHERE (t.foo OR t.bar) AND t.baz

--------------------------------------------------------------------------------

(program
  (statement
    (select
      (keyword_select)
      (select_expression
        (term
          value: (literal))))
    (from
      (keyword_from)
      (relation
        (object_reference
          name: (identifier)))
      (where
        (keyword_where)
        predicate: (binary_expression
          left: (parenthesized_expression
            (binary_expression
              left: (field
                (object_reference
                  name: (identifier))
                name: (identifier))
              operator: (keyword_or)
              right: (field
                (object_reference
                  name: (identifier))
                name: (identifier))))
          operator: (keyword_and)
          right: (field
            (object_reference
              name: (identifier))
            name: (identifier)))))))
